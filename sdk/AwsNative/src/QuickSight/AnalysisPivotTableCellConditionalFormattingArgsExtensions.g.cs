// <auto-generated/>
// Do not edit any code this file. Create or edit the partial class instead in a different file.

#nullable enable

using Pulumi.AwsNative.QuickSight.Inputs;

namespace Pulumi.AwsNative.QuickSight;

public static partial class AnalysisPivotTableCellConditionalFormattingArgsExtensions
{
    public static global::Pulumi.AwsNative.QuickSight.Inputs.AnalysisPivotTableCellConditionalFormattingArgs WithFieldId(this global::Pulumi.AwsNative.QuickSight.Inputs.AnalysisPivotTableCellConditionalFormattingArgs @selfRef, global::System.String fieldId)
    {
        @selfRef.FieldId = fieldId;
        return @selfRef;
    }

    public static global::Pulumi.AwsNative.QuickSight.Inputs.AnalysisPivotTableCellConditionalFormattingArgs WithScope(this global::Pulumi.AwsNative.QuickSight.Inputs.AnalysisPivotTableCellConditionalFormattingArgs @selfRef, global::Pulumi.AwsNative.QuickSight.Inputs.AnalysisPivotTableConditionalFormattingScopeArgs scope)
    {
        @selfRef.Scope = scope;
        return @selfRef;
    }

    public static global::Pulumi.AwsNative.QuickSight.Inputs.AnalysisPivotTableCellConditionalFormattingArgs WithScope(this global::Pulumi.AwsNative.QuickSight.Inputs.AnalysisPivotTableCellConditionalFormattingArgs @selfRef, global::System.Action<global::Pulumi.AwsNative.QuickSight.Inputs.AnalysisPivotTableConditionalFormattingScopeArgs> @configure)
    {
        var @item = new global::Pulumi.AwsNative.QuickSight.Inputs.AnalysisPivotTableConditionalFormattingScopeArgs();
        @configure(@item);
        @selfRef.Scope = @item;
        return @selfRef;
    }

    public static global::Pulumi.AwsNative.QuickSight.Inputs.AnalysisPivotTableCellConditionalFormattingArgs WithScopes(this global::Pulumi.AwsNative.QuickSight.Inputs.AnalysisPivotTableCellConditionalFormattingArgs @selfRef, global::System.Collections.Generic.List<global::Pulumi.AwsNative.QuickSight.Inputs.AnalysisPivotTableConditionalFormattingScopeArgs> scopes)
    {
        @selfRef.Scopes = scopes;
        return @selfRef;
    }

    public static global::Pulumi.AwsNative.QuickSight.Inputs.AnalysisPivotTableCellConditionalFormattingArgs WithScopes(this global::Pulumi.AwsNative.QuickSight.Inputs.AnalysisPivotTableCellConditionalFormattingArgs @selfRef, global::System.Action<global::System.Collections.Generic.List<global::Pulumi.AwsNative.QuickSight.Inputs.AnalysisPivotTableConditionalFormattingScopeArgs>> @configure)
    {
        var @list = new global::System.Collections.Generic.List<global::Pulumi.AwsNative.QuickSight.Inputs.AnalysisPivotTableConditionalFormattingScopeArgs>();
        @configure(@list);
        @selfRef.Scopes = @list;
        return @selfRef;
    }

    public static global::Pulumi.AwsNative.QuickSight.Inputs.AnalysisPivotTableCellConditionalFormattingArgs WithScopes(this global::Pulumi.AwsNative.QuickSight.Inputs.AnalysisPivotTableCellConditionalFormattingArgs @selfRef, global::System.Func<global::System.Collections.Generic.IEnumerable<global::Pulumi.AwsNative.QuickSight.Inputs.AnalysisPivotTableConditionalFormattingScopeArgs>> @create)
    {
        @selfRef.Scopes = global::Pulumi.Output.Create(@create());
        return @selfRef;
    }

    public static global::Pulumi.AwsNative.QuickSight.Inputs.AnalysisPivotTableCellConditionalFormattingArgs WithTextFormat(this global::Pulumi.AwsNative.QuickSight.Inputs.AnalysisPivotTableCellConditionalFormattingArgs @selfRef, global::Pulumi.AwsNative.QuickSight.Inputs.AnalysisTextConditionalFormatArgs textFormat)
    {
        @selfRef.TextFormat = textFormat;
        return @selfRef;
    }

    public static global::Pulumi.AwsNative.QuickSight.Inputs.AnalysisPivotTableCellConditionalFormattingArgs WithTextFormat(this global::Pulumi.AwsNative.QuickSight.Inputs.AnalysisPivotTableCellConditionalFormattingArgs @selfRef, global::System.Action<global::Pulumi.AwsNative.QuickSight.Inputs.AnalysisTextConditionalFormatArgs> @configure)
    {
        var @item = new global::Pulumi.AwsNative.QuickSight.Inputs.AnalysisTextConditionalFormatArgs();
        @configure(@item);
        @selfRef.TextFormat = @item;
        return @selfRef;
    }

}
