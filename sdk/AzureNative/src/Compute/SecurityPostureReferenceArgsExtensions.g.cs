// <auto-generated/>
// Do not edit any code this file. Create or edit the partial class instead in a different file.

#nullable enable

using Pulumi.AzureNative.Compute.Inputs;

namespace Pulumi.AzureNative.Compute;

public static partial class SecurityPostureReferenceArgsExtensions
{
    public static global::Pulumi.AzureNative.Compute.Inputs.SecurityPostureReferenceArgs WithExcludeExtensions(this global::Pulumi.AzureNative.Compute.Inputs.SecurityPostureReferenceArgs @selfRef, global::System.Collections.Generic.List<global::System.String> excludeExtensions)
    {
        @selfRef.ExcludeExtensions = excludeExtensions;
        return @selfRef;
    }

    public static global::Pulumi.AzureNative.Compute.Inputs.SecurityPostureReferenceArgs WithExcludeExtensions(this global::Pulumi.AzureNative.Compute.Inputs.SecurityPostureReferenceArgs @selfRef, global::System.Action<global::System.Collections.Generic.List<global::System.String>> @configure)
    {
        var @list = new global::System.Collections.Generic.List<global::System.String>();
        @configure(@list);
        @selfRef.ExcludeExtensions = @list;
        return @selfRef;
    }

    public static global::Pulumi.AzureNative.Compute.Inputs.SecurityPostureReferenceArgs WithExcludeExtensions(this global::Pulumi.AzureNative.Compute.Inputs.SecurityPostureReferenceArgs @selfRef, global::System.Func<global::System.Collections.Generic.IEnumerable<global::System.String>> @create)
    {
        @selfRef.ExcludeExtensions = global::Pulumi.Output.Create(@create());
        return @selfRef;
    }

    public static global::Pulumi.AzureNative.Compute.Inputs.SecurityPostureReferenceArgs WithId(this global::Pulumi.AzureNative.Compute.Inputs.SecurityPostureReferenceArgs @selfRef, global::System.String id)
    {
        @selfRef.Id = id;
        return @selfRef;
    }

    public static global::Pulumi.AzureNative.Compute.Inputs.SecurityPostureReferenceArgs WithIsOverridable(this global::Pulumi.AzureNative.Compute.Inputs.SecurityPostureReferenceArgs @selfRef, bool isOverridable = true)
    {
        @selfRef.IsOverridable = isOverridable;
        return @selfRef;
    }

}
