// <auto-generated/>
// Do not edit any code this file. Create or edit the partial class instead in a different file.

#nullable enable

using Pulumi;

namespace Pulumiverse.Acme;

public static partial class CertificateStateExtensions
{
    public static global::Pulumiverse.Acme.CertificateState WithAccountKeyPem(this global::Pulumiverse.Acme.CertificateState @selfRef, global::System.String accountKeyPem)
    {
        @selfRef.AccountKeyPem = accountKeyPem;
        return @selfRef;
    }

    public static global::Pulumiverse.Acme.CertificateState WithCertTimeout(this global::Pulumiverse.Acme.CertificateState @selfRef, global::System.Int32 certTimeout)
    {
        @selfRef.CertTimeout = certTimeout;
        return @selfRef;
    }

    public static global::Pulumiverse.Acme.CertificateState WithCertificateDomain(this global::Pulumiverse.Acme.CertificateState @selfRef, global::System.String certificateDomain)
    {
        @selfRef.CertificateDomain = certificateDomain;
        return @selfRef;
    }

    public static global::Pulumiverse.Acme.CertificateState WithCertificateNotAfter(this global::Pulumiverse.Acme.CertificateState @selfRef, global::System.String certificateNotAfter)
    {
        @selfRef.CertificateNotAfter = certificateNotAfter;
        return @selfRef;
    }

    public static global::Pulumiverse.Acme.CertificateState WithCertificateP12(this global::Pulumiverse.Acme.CertificateState @selfRef, global::System.String certificateP12)
    {
        @selfRef.CertificateP12 = certificateP12;
        return @selfRef;
    }

    public static global::Pulumiverse.Acme.CertificateState WithCertificateP12Password(this global::Pulumiverse.Acme.CertificateState @selfRef, global::System.String certificateP12Password)
    {
        @selfRef.CertificateP12Password = certificateP12Password;
        return @selfRef;
    }

    public static global::Pulumiverse.Acme.CertificateState WithCertificatePem(this global::Pulumiverse.Acme.CertificateState @selfRef, global::System.String certificatePem)
    {
        @selfRef.CertificatePem = certificatePem;
        return @selfRef;
    }

    public static global::Pulumiverse.Acme.CertificateState WithCertificateRequestPem(this global::Pulumiverse.Acme.CertificateState @selfRef, global::System.String certificateRequestPem)
    {
        @selfRef.CertificateRequestPem = certificateRequestPem;
        return @selfRef;
    }

    public static global::Pulumiverse.Acme.CertificateState WithCertificateSerial(this global::Pulumiverse.Acme.CertificateState @selfRef, global::System.String certificateSerial)
    {
        @selfRef.CertificateSerial = certificateSerial;
        return @selfRef;
    }

    public static global::Pulumiverse.Acme.CertificateState WithCertificateUrl(this global::Pulumiverse.Acme.CertificateState @selfRef, global::System.String certificateUrl)
    {
        @selfRef.CertificateUrl = certificateUrl;
        return @selfRef;
    }

    public static global::Pulumiverse.Acme.CertificateState WithCommonName(this global::Pulumiverse.Acme.CertificateState @selfRef, global::System.String commonName)
    {
        @selfRef.CommonName = commonName;
        return @selfRef;
    }

    public static global::Pulumiverse.Acme.CertificateState WithDisableCompletePropagation(this global::Pulumiverse.Acme.CertificateState @selfRef, bool disableCompletePropagation = true)
    {
        @selfRef.DisableCompletePropagation = disableCompletePropagation;
        return @selfRef;
    }

    public static global::Pulumiverse.Acme.CertificateState WithDnsChallenges(this global::Pulumiverse.Acme.CertificateState @selfRef, global::System.Collections.Generic.List<global::Pulumiverse.Acme.Inputs.CertificateDnsChallengeGetArgs> dnsChallenges)
    {
        @selfRef.DnsChallenges = dnsChallenges;
        return @selfRef;
    }

    public static global::Pulumiverse.Acme.CertificateState WithDnsChallenges(this global::Pulumiverse.Acme.CertificateState @selfRef, global::System.Action<global::System.Collections.Generic.List<global::Pulumiverse.Acme.Inputs.CertificateDnsChallengeGetArgs>> @configure)
    {
        var @list = new global::System.Collections.Generic.List<global::Pulumiverse.Acme.Inputs.CertificateDnsChallengeGetArgs>();
        @configure(@list);
        @selfRef.DnsChallenges = @list;
        return @selfRef;
    }

    public static global::Pulumiverse.Acme.CertificateState WithDnsChallenges(this global::Pulumiverse.Acme.CertificateState @selfRef, global::System.Func<global::System.Collections.Generic.IEnumerable<global::Pulumiverse.Acme.Inputs.CertificateDnsChallengeGetArgs>> @create)
    {
        @selfRef.DnsChallenges = global::Pulumi.Output.Create(@create());
        return @selfRef;
    }

    public static global::Pulumiverse.Acme.CertificateState WithHttpChallenge(this global::Pulumiverse.Acme.CertificateState @selfRef, global::Pulumiverse.Acme.Inputs.CertificateHttpChallengeGetArgs httpChallenge)
    {
        @selfRef.HttpChallenge = httpChallenge;
        return @selfRef;
    }

    public static global::Pulumiverse.Acme.CertificateState WithHttpChallenge(this global::Pulumiverse.Acme.CertificateState @selfRef, global::System.Action<global::Pulumiverse.Acme.Inputs.CertificateHttpChallengeGetArgs> @configure)
    {
        var @item = new global::Pulumiverse.Acme.Inputs.CertificateHttpChallengeGetArgs();
        @configure(@item);
        @selfRef.HttpChallenge = @item;
        return @selfRef;
    }

    public static global::Pulumiverse.Acme.CertificateState WithHttpMemcachedChallenge(this global::Pulumiverse.Acme.CertificateState @selfRef, global::Pulumiverse.Acme.Inputs.CertificateHttpMemcachedChallengeGetArgs httpMemcachedChallenge)
    {
        @selfRef.HttpMemcachedChallenge = httpMemcachedChallenge;
        return @selfRef;
    }

    public static global::Pulumiverse.Acme.CertificateState WithHttpMemcachedChallenge(this global::Pulumiverse.Acme.CertificateState @selfRef, global::System.Action<global::Pulumiverse.Acme.Inputs.CertificateHttpMemcachedChallengeGetArgs> @configure)
    {
        var @item = new global::Pulumiverse.Acme.Inputs.CertificateHttpMemcachedChallengeGetArgs();
        @configure(@item);
        @selfRef.HttpMemcachedChallenge = @item;
        return @selfRef;
    }

    public static global::Pulumiverse.Acme.CertificateState WithHttpS3Challenge(this global::Pulumiverse.Acme.CertificateState @selfRef, global::Pulumiverse.Acme.Inputs.CertificateHttpS3ChallengeGetArgs httpS3Challenge)
    {
        @selfRef.HttpS3Challenge = httpS3Challenge;
        return @selfRef;
    }

    public static global::Pulumiverse.Acme.CertificateState WithHttpS3Challenge(this global::Pulumiverse.Acme.CertificateState @selfRef, global::System.Action<global::Pulumiverse.Acme.Inputs.CertificateHttpS3ChallengeGetArgs> @configure)
    {
        var @item = new global::Pulumiverse.Acme.Inputs.CertificateHttpS3ChallengeGetArgs();
        @configure(@item);
        @selfRef.HttpS3Challenge = @item;
        return @selfRef;
    }

    public static global::Pulumiverse.Acme.CertificateState WithHttpWebrootChallenge(this global::Pulumiverse.Acme.CertificateState @selfRef, global::Pulumiverse.Acme.Inputs.CertificateHttpWebrootChallengeGetArgs httpWebrootChallenge)
    {
        @selfRef.HttpWebrootChallenge = httpWebrootChallenge;
        return @selfRef;
    }

    public static global::Pulumiverse.Acme.CertificateState WithHttpWebrootChallenge(this global::Pulumiverse.Acme.CertificateState @selfRef, global::System.Action<global::Pulumiverse.Acme.Inputs.CertificateHttpWebrootChallengeGetArgs> @configure)
    {
        var @item = new global::Pulumiverse.Acme.Inputs.CertificateHttpWebrootChallengeGetArgs();
        @configure(@item);
        @selfRef.HttpWebrootChallenge = @item;
        return @selfRef;
    }

    public static global::Pulumiverse.Acme.CertificateState WithIssuerPem(this global::Pulumiverse.Acme.CertificateState @selfRef, global::System.String issuerPem)
    {
        @selfRef.IssuerPem = issuerPem;
        return @selfRef;
    }

    public static global::Pulumiverse.Acme.CertificateState WithKeyType(this global::Pulumiverse.Acme.CertificateState @selfRef, global::System.String keyType)
    {
        @selfRef.KeyType = keyType;
        return @selfRef;
    }

    public static global::Pulumiverse.Acme.CertificateState WithMinDaysRemaining(this global::Pulumiverse.Acme.CertificateState @selfRef, global::System.Int32 minDaysRemaining)
    {
        @selfRef.MinDaysRemaining = minDaysRemaining;
        return @selfRef;
    }

    public static global::Pulumiverse.Acme.CertificateState WithMustStaple(this global::Pulumiverse.Acme.CertificateState @selfRef, bool mustStaple = true)
    {
        @selfRef.MustStaple = mustStaple;
        return @selfRef;
    }

    public static global::Pulumiverse.Acme.CertificateState WithPreCheckDelay(this global::Pulumiverse.Acme.CertificateState @selfRef, global::System.Int32 preCheckDelay)
    {
        @selfRef.PreCheckDelay = preCheckDelay;
        return @selfRef;
    }

    public static global::Pulumiverse.Acme.CertificateState WithPreferredChain(this global::Pulumiverse.Acme.CertificateState @selfRef, global::System.String preferredChain)
    {
        @selfRef.PreferredChain = preferredChain;
        return @selfRef;
    }

    public static global::Pulumiverse.Acme.CertificateState WithPrivateKeyPem(this global::Pulumiverse.Acme.CertificateState @selfRef, global::System.String privateKeyPem)
    {
        @selfRef.PrivateKeyPem = privateKeyPem;
        return @selfRef;
    }

    public static global::Pulumiverse.Acme.CertificateState WithProfile(this global::Pulumiverse.Acme.CertificateState @selfRef, global::System.String profile)
    {
        @selfRef.Profile = profile;
        return @selfRef;
    }

    public static global::Pulumiverse.Acme.CertificateState WithRecursiveNameservers(this global::Pulumiverse.Acme.CertificateState @selfRef, global::System.Collections.Generic.List<global::System.String> recursiveNameservers)
    {
        @selfRef.RecursiveNameservers = recursiveNameservers;
        return @selfRef;
    }

    public static global::Pulumiverse.Acme.CertificateState WithRecursiveNameservers(this global::Pulumiverse.Acme.CertificateState @selfRef, global::System.Action<global::System.Collections.Generic.List<global::System.String>> @configure)
    {
        var @list = new global::System.Collections.Generic.List<global::System.String>();
        @configure(@list);
        @selfRef.RecursiveNameservers = @list;
        return @selfRef;
    }

    public static global::Pulumiverse.Acme.CertificateState WithRecursiveNameservers(this global::Pulumiverse.Acme.CertificateState @selfRef, global::System.Func<global::System.Collections.Generic.IEnumerable<global::System.String>> @create)
    {
        @selfRef.RecursiveNameservers = global::Pulumi.Output.Create(@create());
        return @selfRef;
    }

    public static global::Pulumiverse.Acme.CertificateState WithRevokeCertificateOnDestroy(this global::Pulumiverse.Acme.CertificateState @selfRef, bool revokeCertificateOnDestroy = true)
    {
        @selfRef.RevokeCertificateOnDestroy = revokeCertificateOnDestroy;
        return @selfRef;
    }

    public static global::Pulumiverse.Acme.CertificateState WithRevokeCertificateReason(this global::Pulumiverse.Acme.CertificateState @selfRef, global::System.String revokeCertificateReason)
    {
        @selfRef.RevokeCertificateReason = revokeCertificateReason;
        return @selfRef;
    }

    public static global::Pulumiverse.Acme.CertificateState WithSubjectAlternativeNames(this global::Pulumiverse.Acme.CertificateState @selfRef, global::System.Collections.Generic.List<global::System.String> subjectAlternativeNames)
    {
        @selfRef.SubjectAlternativeNames = subjectAlternativeNames;
        return @selfRef;
    }

    public static global::Pulumiverse.Acme.CertificateState WithSubjectAlternativeNames(this global::Pulumiverse.Acme.CertificateState @selfRef, global::System.Action<global::System.Collections.Generic.List<global::System.String>> @configure)
    {
        var @list = new global::System.Collections.Generic.List<global::System.String>();
        @configure(@list);
        @selfRef.SubjectAlternativeNames = @list;
        return @selfRef;
    }

    public static global::Pulumiverse.Acme.CertificateState WithSubjectAlternativeNames(this global::Pulumiverse.Acme.CertificateState @selfRef, global::System.Func<global::System.Collections.Generic.IEnumerable<global::System.String>> @create)
    {
        @selfRef.SubjectAlternativeNames = global::Pulumi.Output.Create(@create());
        return @selfRef;
    }

    public static global::Pulumiverse.Acme.CertificateState WithTlsChallenge(this global::Pulumiverse.Acme.CertificateState @selfRef, global::Pulumiverse.Acme.Inputs.CertificateTlsChallengeGetArgs tlsChallenge)
    {
        @selfRef.TlsChallenge = tlsChallenge;
        return @selfRef;
    }

    public static global::Pulumiverse.Acme.CertificateState WithTlsChallenge(this global::Pulumiverse.Acme.CertificateState @selfRef, global::System.Action<global::Pulumiverse.Acme.Inputs.CertificateTlsChallengeGetArgs> @configure)
    {
        var @item = new global::Pulumiverse.Acme.Inputs.CertificateTlsChallengeGetArgs();
        @configure(@item);
        @selfRef.TlsChallenge = @item;
        return @selfRef;
    }

}
